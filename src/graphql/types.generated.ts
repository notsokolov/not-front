// eslint-disable
// ⚠️ DO NOT EDIT ⚠️
// This file is automatically generated, run yarn run generate to update

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Post = {
  __typename?: 'Post';
  canonical_url?: Maybe<Scalars['String']>;
  codeinjection_foot?: Maybe<Scalars['String']>;
  codeinjection_head?: Maybe<Scalars['String']>;
  comment_id?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['String']>;
  custom_excerpt?: Maybe<Scalars['String']>;
  excerpt?: Maybe<Scalars['String']>;
  feature_image?: Maybe<Scalars['String']>;
  featured?: Maybe<Scalars['Boolean']>;
  html?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  og_description?: Maybe<Scalars['String']>;
  og_image?: Maybe<Scalars['String']>;
  og_title?: Maybe<Scalars['String']>;
  published_at?: Maybe<Scalars['String']>;
  reading_time?: Maybe<Scalars['Int']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  twitter_description?: Maybe<Scalars['String']>;
  twitter_image?: Maybe<Scalars['String']>;
  twitter_title?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  uuid?: Maybe<Scalars['String']>;
  visibility?: Maybe<Scalars['String']>;
};

export type Bookmark = {
  __typename?: 'Bookmark';
  id: Scalars['ID'];
  url: Scalars['String'];
  author?: Maybe<Scalars['String']>;
  creator?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  site_name?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  host?: Maybe<Scalars['String']>;
  reactions?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  twitterHandle?: Maybe<Scalars['String']>;
};

export type Episode = {
  __typename?: 'Episode';
  id?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  legacy_id?: Maybe<Scalars['String']>;
  long_description?: Maybe<Scalars['String']>;
  published_at?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

export type Repo = {
  __typename?: 'Repo';
  org?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  stars?: Maybe<Scalars['Int']>;
};

export enum AmaStatus {
  Pending = 'PENDING',
  Answered = 'ANSWERED'
}

export type Ama = {
  __typename?: 'AMA';
  id: Scalars['String'];
  question: Scalars['String'];
  status?: Maybe<AmaStatus>;
  answer?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['String']>;
  reactions?: Maybe<Scalars['Int']>;
};

export type Query = {
  __typename?: 'Query';
  bookmarks: Array<Maybe<Bookmark>>;
  episodes: Array<Maybe<Episode>>;
  posts: Array<Maybe<Post>>;
  post?: Maybe<Post>;
  amaQuestions: Array<Maybe<Ama>>;
  repos: Array<Maybe<Repo>>;
  isMe?: Maybe<Scalars['Boolean']>;
};


export type QueryBookmarksArgs = {
  skip?: Maybe<Scalars['Int']>;
  category?: Maybe<Scalars['String']>;
};


export type QueryPostsArgs = {
  first?: Maybe<Scalars['Int']>;
};


export type QueryPostArgs = {
  slug: Scalars['String'];
};


export type QueryAmaQuestionsArgs = {
  skip?: Maybe<Scalars['Int']>;
  status?: Maybe<AmaStatus>;
};

export type Mutation = {
  __typename?: 'Mutation';
  login?: Maybe<Scalars['Boolean']>;
  logout?: Maybe<Scalars['Boolean']>;
  addBookmark?: Maybe<Bookmark>;
  editBookmark?: Maybe<Bookmark>;
  deleteBookmark?: Maybe<Scalars['Boolean']>;
  addBookmarkReaction?: Maybe<Bookmark>;
  addAMAQuestion?: Maybe<Scalars['Boolean']>;
  deleteAMAQuestion?: Maybe<Scalars['Boolean']>;
  editAMAQuestion?: Maybe<Ama>;
  addAMAReaction?: Maybe<Ama>;
};


export type MutationLoginArgs = {
  password: Scalars['String'];
};


export type MutationAddBookmarkArgs = {
  url: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  twitterHandle?: Maybe<Scalars['String']>;
};


export type MutationEditBookmarkArgs = {
  id: Scalars['ID'];
  title: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  twitterHandle?: Maybe<Scalars['String']>;
};


export type MutationDeleteBookmarkArgs = {
  id: Scalars['ID'];
};


export type MutationAddBookmarkReactionArgs = {
  id: Scalars['ID'];
};


export type MutationAddAmaQuestionArgs = {
  question: Scalars['String'];
};


export type MutationDeleteAmaQuestionArgs = {
  id: Scalars['ID'];
};


export type MutationEditAmaQuestionArgs = {
  id: Scalars['ID'];
  answer?: Maybe<Scalars['String']>;
  question?: Maybe<Scalars['String']>;
  status?: Maybe<AmaStatus>;
};


export type MutationAddAmaReactionArgs = {
  id: Scalars['ID'];
};

export type PostInfoFragment = { __typename?: 'Post', id?: Maybe<string>, title?: Maybe<string>, slug?: Maybe<string>, updated_at?: Maybe<string>, excerpt?: Maybe<string>, feature_image?: Maybe<string>, html?: Maybe<string> };

export type GetPostsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPostsQuery = { __typename?: 'Query', posts: Array<Maybe<(
    { __typename?: 'Post' }
    & PostInfoFragment
  )>> };

export type GetPostQueryVariables = Exact<{
  slug: Scalars['String'];
  first?: Maybe<Scalars['Int']>;
}>;


export type GetPostQuery = { __typename?: 'Query', post?: Maybe<(
    { __typename?: 'Post' }
    & PostInfoFragment
  )> };

export const PostInfoFragmentDoc = gql`
    fragment PostInfo on Post {
  id
  title
  slug
  updated_at
  excerpt
  feature_image
  html
}
    `;
export const GetPostsDocument = gql`
    query GetPosts {
  posts {
    ...PostInfo
  }
}
    ${PostInfoFragmentDoc}`;

/**
 * __useGetPostsQuery__
 *
 * To run a query within a React component, call `useGetPostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPostsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPostsQuery(baseOptions?: Apollo.QueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, options);
      }
export function useGetPostsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPostsQuery, GetPostsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPostsQuery, GetPostsQueryVariables>(GetPostsDocument, options);
        }
export type GetPostsQueryHookResult = ReturnType<typeof useGetPostsQuery>;
export type GetPostsLazyQueryHookResult = ReturnType<typeof useGetPostsLazyQuery>;
export type GetPostsQueryResult = Apollo.QueryResult<GetPostsQuery, GetPostsQueryVariables>;
export const GetPostDocument = gql`
    query GetPost($slug: String!, $first: Int) {
  post(slug: $slug) {
    ...PostInfo
  }
}
    ${PostInfoFragmentDoc}`;

/**
 * __useGetPostQuery__
 *
 * To run a query within a React component, call `useGetPostQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPostQuery({
 *   variables: {
 *      slug: // value for 'slug'
 *      first: // value for 'first'
 *   },
 * });
 */
export function useGetPostQuery(baseOptions: Apollo.QueryHookOptions<GetPostQuery, GetPostQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPostQuery, GetPostQueryVariables>(GetPostDocument, options);
      }
export function useGetPostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPostQuery, GetPostQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPostQuery, GetPostQueryVariables>(GetPostDocument, options);
        }
export type GetPostQueryHookResult = ReturnType<typeof useGetPostQuery>;
export type GetPostLazyQueryHookResult = ReturnType<typeof useGetPostLazyQuery>;
export type GetPostQueryResult = Apollo.QueryResult<GetPostQuery, GetPostQueryVariables>;